{"ast":null,"code":"const initialState = {\n  missions: [],\n  error: null\n};\nconst missionsReducer = (state = initialState, action) => {\n  let missionId;\n  switch (action.type) {\n    case 'FETCH_MISSIONS_SUCCESS':\n      return {\n        ...state,\n        missions: action.payload,\n        error: null\n      };\n    case 'FETCH_MISSIONS_FAILURE':\n      return {\n        ...state,\n        missions: [],\n        error: action.payload\n      };\n    case 'JOIN_MISSION':\n      missionId = action.payload; // Assign the value inside the case block\n      return {\n        ...state,\n        missions: state.missions.map(mission => {\n          // To use rocket?\n          if (mission.mission_id === missionId) {\n            return {\n              ...mission,\n              reserved: true\n            };\n          }\n          return mission;\n        })\n      };\n    case 'LEAVE_MISSION':\n      missionId = action.payload;\n      return {\n        ...state,\n        missions: state.missions.map(mission => {\n          if (mission.mission_id === missionId) {\n            return {\n              ...mission,\n              reserved: false\n            };\n          }\n          return mission;\n        })\n      };\n    default:\n      return state;\n  }\n};\nexport default missionsReducer;","map":{"version":3,"names":["initialState","missions","error","missionsReducer","state","action","missionId","type","payload","map","mission","mission_id","reserved"],"sources":["C:/Users/bi_me/Desktop/microverse/module-3-React/react-group-project/src/redux/reducers/missionsReducer.jsx"],"sourcesContent":["const initialState = {\r\n  missions: [],\r\n  error: null,\r\n};\r\n\r\nconst missionsReducer = (state = initialState, action) => {\r\n  let missionId;\r\n  switch (action.type) {\r\n    case 'FETCH_MISSIONS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        missions: action.payload,\r\n        error: null,\r\n      };\r\n    case 'FETCH_MISSIONS_FAILURE':\r\n      return {\r\n        ...state,\r\n        missions: [],\r\n        error: action.payload,\r\n      };\r\n    case 'JOIN_MISSION':\r\n      missionId = action.payload; // Assign the value inside the case block\r\n      return {\r\n        ...state,\r\n        missions: state.missions.map((mission) => { // To use rocket?\r\n          if (mission.mission_id === missionId) {\r\n            return { ...mission, reserved: true };\r\n          }\r\n          return mission;\r\n        }),\r\n      };\r\n    case 'LEAVE_MISSION':\r\n      missionId = action.payload;\r\n      return {\r\n        ...state,\r\n        missions: state.missions.map((mission) => {\r\n          if (mission.mission_id === missionId) {\r\n            return { ...mission, reserved: false };\r\n          }\r\n          return mission;\r\n        }),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default missionsReducer;\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,eAAe,GAAGA,CAACC,KAAK,GAAGJ,YAAY,EAAEK,MAAM,KAAK;EACxD,IAAIC,SAAS;EACb,QAAQD,MAAM,CAACE,IAAI;IACjB,KAAK,wBAAwB;MAC3B,OAAO;QACL,GAAGH,KAAK;QACRH,QAAQ,EAAEI,MAAM,CAACG,OAAO;QACxBN,KAAK,EAAE;MACT,CAAC;IACH,KAAK,wBAAwB;MAC3B,OAAO;QACL,GAAGE,KAAK;QACRH,QAAQ,EAAE,EAAE;QACZC,KAAK,EAAEG,MAAM,CAACG;MAChB,CAAC;IACH,KAAK,cAAc;MACjBF,SAAS,GAAGD,MAAM,CAACG,OAAO,CAAC,CAAC;MAC5B,OAAO;QACL,GAAGJ,KAAK;QACRH,QAAQ,EAAEG,KAAK,CAACH,QAAQ,CAACQ,GAAG,CAAEC,OAAO,IAAK;UAAE;UAC1C,IAAIA,OAAO,CAACC,UAAU,KAAKL,SAAS,EAAE;YACpC,OAAO;cAAE,GAAGI,OAAO;cAAEE,QAAQ,EAAE;YAAK,CAAC;UACvC;UACA,OAAOF,OAAO;QAChB,CAAC;MACH,CAAC;IACH,KAAK,eAAe;MAClBJ,SAAS,GAAGD,MAAM,CAACG,OAAO;MAC1B,OAAO;QACL,GAAGJ,KAAK;QACRH,QAAQ,EAAEG,KAAK,CAACH,QAAQ,CAACQ,GAAG,CAAEC,OAAO,IAAK;UACxC,IAAIA,OAAO,CAACC,UAAU,KAAKL,SAAS,EAAE;YACpC,OAAO;cAAE,GAAGI,OAAO;cAAEE,QAAQ,EAAE;YAAM,CAAC;UACxC;UACA,OAAOF,OAAO;QAChB,CAAC;MACH,CAAC;IAEH;MACE,OAAON,KAAK;EAChB;AACF,CAAC;AACD,eAAeD,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}