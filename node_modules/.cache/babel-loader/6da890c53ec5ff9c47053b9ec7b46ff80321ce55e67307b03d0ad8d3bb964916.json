{"ast":null,"code":"const initialState = {\n  missions: [],\n  error: null\n};\nexport const fetchMissions = () => async dispatch => {\n  try {\n    const response = await fetch('https://api.spacexdata.com/v3/missions').then(res => res.json()).then(data => data);\n    const missions = response.map(mission => ({\n      mission_id: mission.mission_id,\n      mission_name: mission.mission_name,\n      description: mission.description\n    }));\n    dispatch({\n      type: 'FETCH_MISSIONS_SUCCESS',\n      payload: missions\n    });\n  } catch (error) {\n    dispatch({\n      type: 'FETCH_MISSIONS_FAILURE',\n      payload: error.message\n    });\n  }\n};\nexport const joinMission = missionId => ({\n  type: 'JOIN_MISSION',\n  payload: missionId\n});\nexport const leaveMission = missionId => ({\n  type: 'LEAVE_MISSION',\n  payload: missionId\n});\nconst missionsReducer = (state = initialState, action) => {\n  let missionId;\n  switch (action.type) {\n    case 'FETCH_MISSIONS_SUCCESS':\n      return {\n        ...state,\n        missions: action.payload,\n        error: null\n      };\n    case 'FETCH_MISSIONS_FAILURE':\n      return {\n        ...state,\n        missions: [],\n        error: action.payload\n      };\n    case 'JOIN_MISSION':\n      missionId = action.payload;\n      return {\n        ...state,\n        missions: state.missions.map(mission => {\n          if (mission.mission_id === missionId) {\n            return {\n              ...mission,\n              reserved: true\n            };\n          }\n          return mission;\n        })\n      };\n    case 'LEAVE_MISSION':\n      missionId = action.payload;\n      return {\n        ...state,\n        missions: state.missions.map(mission => {\n          if (mission.mission_id === missionId) {\n            return {\n              ...mission,\n              reserved: false\n            };\n          }\n          return mission;\n        })\n      };\n    default:\n      return state;\n  }\n};\nexport default missionsReducer;","map":{"version":3,"names":["initialState","missions","error","fetchMissions","dispatch","response","fetch","then","res","json","data","map","mission","mission_id","mission_name","description","type","payload","message","joinMission","missionId","leaveMission","missionsReducer","state","action","reserved"],"sources":["C:/Users/bi_me/Desktop/microverse/module-3-React/react-group-project/src/redux/missions/missionsSlice.jsx"],"sourcesContent":["const initialState = {\r\n  missions: [],\r\n  error: null,\r\n};\r\n\r\nexport const fetchMissions = () => async (dispatch) => {\r\n  try {\r\n    const response = await fetch('https://api.spacexdata.com/v3/missions').then((res) => res.json()).then((data) => data);\r\n    const missions = response.map((mission) => ({\r\n      mission_id: mission.mission_id,\r\n      mission_name: mission.mission_name,\r\n      description: mission.description,\r\n    }));\r\n\r\n    dispatch({ type: 'FETCH_MISSIONS_SUCCESS', payload: missions });\r\n  } catch (error) {\r\n    dispatch({ type: 'FETCH_MISSIONS_FAILURE', payload: error.message });\r\n  }\r\n};\r\n\r\nexport const joinMission = (missionId) => ({\r\n  type: 'JOIN_MISSION',\r\n  payload: missionId,\r\n});\r\n\r\nexport const leaveMission = (missionId) => ({\r\n  type: 'LEAVE_MISSION',\r\n  payload: missionId,\r\n});\r\n\r\nconst missionsReducer = (state = initialState, action) => {\r\n  let missionId;\r\n  switch (action.type) {\r\n    case 'FETCH_MISSIONS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        missions: action.payload,\r\n        error: null,\r\n      };\r\n    case 'FETCH_MISSIONS_FAILURE':\r\n      return {\r\n        ...state,\r\n        missions: [],\r\n        error: action.payload,\r\n      };\r\n    case 'JOIN_MISSION':\r\n      missionId = action.payload;\r\n      return {\r\n        ...state,\r\n        missions: state.missions.map((mission) => {\r\n          if (mission.mission_id === missionId) {\r\n            return { ...mission, reserved: true };\r\n          }\r\n          return mission;\r\n        }),\r\n      };\r\n    case 'LEAVE_MISSION':\r\n      missionId = action.payload;\r\n      return {\r\n        ...state,\r\n        missions: state.missions.map((mission) => {\r\n          if (mission.mission_id === missionId) {\r\n            return { ...mission, reserved: false };\r\n          }\r\n          return mission;\r\n        }),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default missionsReducer;\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EACrD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAACF,IAAI,CAAEG,IAAI,IAAKA,IAAI,CAAC;IACrH,MAAMT,QAAQ,GAAGI,QAAQ,CAACM,GAAG,CAAEC,OAAO,KAAM;MAC1CC,UAAU,EAAED,OAAO,CAACC,UAAU;MAC9BC,YAAY,EAAEF,OAAO,CAACE,YAAY;MAClCC,WAAW,EAAEH,OAAO,CAACG;IACvB,CAAC,CAAC,CAAC;IAEHX,QAAQ,CAAC;MAAEY,IAAI,EAAE,wBAAwB;MAAEC,OAAO,EAAEhB;IAAS,CAAC,CAAC;EACjE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdE,QAAQ,CAAC;MAAEY,IAAI,EAAE,wBAAwB;MAAEC,OAAO,EAAEf,KAAK,CAACgB;IAAQ,CAAC,CAAC;EACtE;AACF,CAAC;AAED,OAAO,MAAMC,WAAW,GAAIC,SAAS,KAAM;EACzCJ,IAAI,EAAE,cAAc;EACpBC,OAAO,EAAEG;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAID,SAAS,KAAM;EAC1CJ,IAAI,EAAE,eAAe;EACrBC,OAAO,EAAEG;AACX,CAAC,CAAC;AAEF,MAAME,eAAe,GAAGA,CAACC,KAAK,GAAGvB,YAAY,EAAEwB,MAAM,KAAK;EACxD,IAAIJ,SAAS;EACb,QAAQI,MAAM,CAACR,IAAI;IACjB,KAAK,wBAAwB;MAC3B,OAAO;QACL,GAAGO,KAAK;QACRtB,QAAQ,EAAEuB,MAAM,CAACP,OAAO;QACxBf,KAAK,EAAE;MACT,CAAC;IACH,KAAK,wBAAwB;MAC3B,OAAO;QACL,GAAGqB,KAAK;QACRtB,QAAQ,EAAE,EAAE;QACZC,KAAK,EAAEsB,MAAM,CAACP;MAChB,CAAC;IACH,KAAK,cAAc;MACjBG,SAAS,GAAGI,MAAM,CAACP,OAAO;MAC1B,OAAO;QACL,GAAGM,KAAK;QACRtB,QAAQ,EAAEsB,KAAK,CAACtB,QAAQ,CAACU,GAAG,CAAEC,OAAO,IAAK;UACxC,IAAIA,OAAO,CAACC,UAAU,KAAKO,SAAS,EAAE;YACpC,OAAO;cAAE,GAAGR,OAAO;cAAEa,QAAQ,EAAE;YAAK,CAAC;UACvC;UACA,OAAOb,OAAO;QAChB,CAAC;MACH,CAAC;IACH,KAAK,eAAe;MAClBQ,SAAS,GAAGI,MAAM,CAACP,OAAO;MAC1B,OAAO;QACL,GAAGM,KAAK;QACRtB,QAAQ,EAAEsB,KAAK,CAACtB,QAAQ,CAACU,GAAG,CAAEC,OAAO,IAAK;UACxC,IAAIA,OAAO,CAACC,UAAU,KAAKO,SAAS,EAAE;YACpC,OAAO;cAAE,GAAGR,OAAO;cAAEa,QAAQ,EAAE;YAAM,CAAC;UACxC;UACA,OAAOb,OAAO;QAChB,CAAC;MACH,CAAC;IAEH;MACE,OAAOW,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}